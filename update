#!/usr/bin/env zsh

export UPDATER_ROOT_DIR="${0:h}"

function cleanup () {
    if [[ -n "${UPDATER_TMP_DIR}" ]]; then
        rm -rf "${UPDATER_TMP_DIR}"
    fi
    exit
}
trap cleanup EXIT INT TERM

function print_usage () {
    echo "Usage: update [-a] script1 [script2 ... scriptN]"
    echo
    echo "Run the specified update scripts. The special name 'all' runs all available scripts."
    echo
    echo "positional arguments:"
    echo "  script1   The script name(s) to run"
    echo
    echo "optional arguments:"
    echo "  -a   abort if a script fails"
}

function read_options () {
    ABORT_ON_FAIL=0
    while getopts ":a" opt; do
        case ${opt} in
            a)
                ABORT_ON_FAIL=1
                ;;
            \?)
                >&2 echo "Invalid option: '-${OPTARG}'"
                ;&
            *)
                print_usage
                exit 1
                ;;
        esac
    done
    COUNT_OPTIONAL_PARAMETERS="$(( OPTIND - 1 ))"
}

function init_variables () {
    local linux_distro_detail linux_distro_details
    typeset -A MACOS_CODENAMES

    export UPDATER_RC_PATH="${HOME}/.zsh-updaterrc"
    export UPDATER_SCRIPTS_DIR="${UPDATER_ROOT_DIR}/update_scripts"
    export UPDATER_UTILS_DIR="${UPDATER_ROOT_DIR}/utils"
    export UPDATE_ORDER_PATH="${UPDATER_SCRIPTS_DIR}/update_order"
    export UPDATE_EXTRA_DEFINITIONS="${UPDATER_SCRIPTS_DIR}/extra_definitions.zsh"
    export UPDATER_TMP_DIR="$(mktemp -d)"
    [[ -f "${UPDATER_RC_PATH}" ]] || export UPDATER_RC_PATH=""

    MACOS_CODENAMES=( \
        "0" "Cheetah" \
        "1" "Puma" \
        "2" "Jaguar" \
        "3" "Panther" \
        "4" "Tiger" \
        "5" "Leopard" \
        "6" "Snow Leopard" \
        "7" "Lion" \
        "8" "Mountain Lion" \
        "9" "Mavericks" \
        "10" "Yosemite" \
        "11" "El Capitan" \
        "12" "Sierra" \
        "13" "High Sierra" \
        "14" "Mojave" \
        "15" "Catalina" \
    )

    if [[ "$(uname)" == "Darwin" ]]; then
        export PLATFORM_MACOS=1
        export PLATFORM_LINUX=0
    else
        export PLATFORM_MACOS=0
        export PLATFORM_LINUX=1
    fi
    if (( PLATFORM_MACOS )); then
        export PLATFORM_MACOS_VERSION="$(sw_vers | awk '$1 == "ProductVersion:" { print $2 }')"
        export PLATFORM_MACOS_MAJOR_VERSION="$(echo "${PLATFORM_LINUX_DISTRO_VERSION}" | awk -F'.' '{ print $1 }')"
        export PLATFORM_MACOS_MINOR_VERSION="$(echo "${PLATFORM_LINUX_DISTRO_VERSION}" | awk -F'.' '{ print $2 }')"
        export PLATFORM_DETAILS="${PLATFORM_MACOS_VERSION};${MACOS_CODENAMES[${PLATFORM_MACOS_MINOR_VERSION}]}"
        export PLATFORM_DESCRIPTIVE_NAME="macOS ${PLATFORM_MACOS_VERSION} ${MACOS_CODENAMES[${PLATFORM_MACOS_MINOR_VERSION}]}"
    elif (( ${PLATFORM_LINUX} )); then
        export PLATFORM_LINUX_DISTRO="unknown"
        [[ -f "/etc/arch-release" ]] && export PLATFORM_LINUX_DISTRO="arch"
        [[ -f "/etc/redhat-release" ]] && export PLATFORM_LINUX_DISTRO="redhat"
        [[ -f "/etc/debian_version" ]] && export PLATFORM_LINUX_DISTRO="debian"
        if uname -a | grep -q "Microsoft"; then
            export PLATFORM_LINUX_WSL=1
        else
            export PLATFORM_LINUX_WSL=0
        fi
        case "${PLATFORM_LINUX_DISTRO}" in
            arch)
                export PLATFORM_LINUX_DISTRO_VERSION="$(lsb_release -r | awk '{ print $2 }')"
                export PLATFORM_LINUX_DISTRO_MAJOR_VERSION="$(echo "${PLATFORM_LINUX_DISTRO_VERSION}" | awk -F'.' '{ print $1 }')"
                export PLATFORM_LINUX_DISTRO_CODENAME="$(lsb_release -c | awk '{ print $2 }')"
                export PLATFORM_DESCRIPTIVE_NAME="$(lsb_release -d | awk '{ print $2 }') ${PLATFORM_LINUX_DISTRO_VERSION} (${PLATFORM_LINUX_DISTRO_CODENAME})"
                ;;
            redhat)
                if which lsb_release >/dev/null 2>&1; then
                    export PLATFORM_LINUX_DISTRO_VERSION="$(lsb_release -r | awk '{ print $2 }')"
                    export PLATFORM_LINUX_DISTRO_MAJOR_VERSION="$(echo "${PLATFORM_LINUX_DISTRO_VERSION}" | awk -F'.' '{ print $1 }')"
                    export PLATFORM_LINUX_DISTRO_NAME="$(lsb_release -d | awk '{ print $2 }')"
                else
                    export PLATFORM_LINUX_DISTRO_VERSION="$(sed 's/[^0-9.]*//g' /etc/redhat-release)"
                    if [[ "${PLATFORM_LINUX_DISTRO_VERSION}" > "8" ]]; then
                        export PLATFORM_LINUX_DISTRO_MAJOR_VERSION="8"
                    elif [[ "${PLATFORM_LINUX_DISTRO_VERSION}" > "7" ]]; then
                        export PLATFORM_LINUX_DISTRO_MAJOR_VERSION="7"
                    elif [[ "${PLATFORM_LINUX_DISTRO_VERSION}" > "6" ]]; then
                        export PLATFORM_LINUX_DISTRO_MAJOR_VERSION="6"
                    else
                        export PLATFORM_LINUX_DISTRO_MAJOR_VERSION="5"
                    fi
                    export PLATFORM_LINUX_DISTRO_NAME="$(awk '{ print $1 }' /etc/redhat-release)"
                fi
                export PLATFORM_DESCRIPTIVE_NAME="${PLATFORM_LINUX_DISTRO_NAME} ${PLATFORM_LINUX_DISTRO_VERSION}"
                ;;
            debian)
                export PLATFORM_LINUX_DISTRO_VERSION="$(lsb_release -r | awk '{ print $2 }')"
                export PLATFORM_LINUX_DISTRO_MAJOR_VERSION="$(echo "${PLATFORM_LINUX_DISTRO_VERSION}" | awk -F'.' '{ print $1 }')"
                export PLATFORM_LINUX_DISTRO_CODENAME="$(lsb_release -c | awk '{ print $2 }')"
                if ! [[ "${PLATFORM_LINUX_DISTRO_MAJOR_VERSION}" =~ ^[0-9]+$ ]]; then
                    export PLATFORM_LINUX_DISTRO_BRANCH="${PLATFORM_LINUX_DISTRO_VERSION}"
                fi
                export PLATFORM_DESCRIPTIVE_NAME="Debian ${PLATFORM_LINUX_DISTRO_VERSION} (${PLATFORM_LINUX_DISTRO_CODENAME})"
                ;;
            *)
                ;;
        esac
        linux_distro_details=( "${PLATFORM_LINUX_DISTRO_VERSION}" "${PLATFORM_LINUX_DISTRO_MAJOR_VERSION}" \
                               "${PLATFORM_LINUX_DISTRO_CODENAME}" "${PLATFORM_LINUX_DISTRO_BRANCH}" )
        for linux_distro_detail in "${linux_distro_details[@]}"; do
            [[ -n "${linux_distro_detail}" ]] || continue;
            if [[ -z "${PLATFORM_DETAILS}" ]]; then
                PLATFORM_DETAILS="${linux_distro_detail}"
            else
                PLATFORM_DETAILS="${PLATFORM_DETAILS};${linux_distro_detail}"
            fi
        done
        if (( PLATFORM_LINUX_WSL )); then
            PLATFORM_DETAILS="${PLATFORM_DETAILS};wsl"
            export PLATFORM_DESCRIPTIVE_NAME="${PLATFORM_DESCRIPTIVE_NAME} (wsl)"
        fi
        export PLATFORM_DETAILS
    fi

    [[ -n "${UPDATER_RC_PATH}" ]] && source "${UPDATER_RC_PATH}"
    source "${UPDATER_UTILS_DIR}/update_utils.zsh"
}

function update_updater_scripts () {
    if [[ "${UPDATER_SCRIPTS_REPO_URL}" == "" ]]; then
        echo "The variable UPDATER_SCRIPTS_REPO_URL is not set. Aborting"
        exit 101
    fi

    print_update "update scripts"
    if [[ "$(cd ${UPDATER_SCRIPTS_DIR} >/dev/null 2>&1 && git remote -v | awk '$1 == "origin" && $3 == "(fetch)" { print $2 }')" == "${UPDATER_SCRIPTS_REPO_URL}" ]]; then
        pushd "${UPDATER_SCRIPTS_DIR}" && \
        git fetch origin && \
        [[ "$(git rev-list --count master...origin/master)" -gt 0 ]] && \
        git reset --hard origin/master && \
        popd
    else
        rm -rf "${UPDATER_SCRIPTS_DIR}"
        git clone "${UPDATER_SCRIPTS_REPO_URL}" "${UPDATER_SCRIPTS_DIR}"
    fi
    [[ -f "${UPDATE_EXTRA_DEFINITIONS}" ]] || export UPDATE_EXTRA_DEFINITIONS=""
    [[ -n "${UPDATE_EXTRA_DEFINITIONS}" ]] && source "${UPDATE_EXTRA_DEFINITIONS}"
}

function read_update_order () {
    if [[ ! -f "${UPDATE_ORDER_PATH}" ]]; then
        echo "The file ${UPDATE_ORDER_PATH} does not exist. Aborting"
        exit 102
    fi
    UPDATE_ORDER=( "${(f)$(<${UPDATE_ORDER_PATH})}" )
}

function run_update_script () (
    local update_script

    update_script="$1"
    UPDATE_SCRIPT_PATH="${UPDATER_SCRIPTS_DIR}/scripts/${update_script}"

    if ! [[ -r "${UPDATE_SCRIPT_PATH}" ]]; then
        print_abort "script not readable" "Could not read the update script \"${update_script}\""
        exit 1
    fi
    source "${UPDATE_SCRIPT_PATH}"

    export UPDATE_RUN_TMP_DIR="${UPDATER_TMP_DIR}/update_run_tmp"
    mkdir -p "${UPDATE_RUN_TMP_DIR}" && \
    (
        cd "${UPDATE_RUN_TMP_DIR}" || return
        update_description
        if ! is_function "update_condition" || { update_condition; RET="$?"; [[ "${RET}" -eq 0 ]]; }; then
            print_update "${UPDATE_DESCRIPTION_OUTPUT}" "${UPDATE_CONDITION_OUTPUT}"
            update_run
            RET="$?"
            [[ "${RET}" -ne 0 ]] && print_abort "${UPDATE_DESCRIPTION_OUTPUT}" "${UPDATE_RUN_OUTPUT}"
            exit "${RET}"
        else
            if [[ "${RET}" -eq 1 ]]; then
                print_skip "${UPDATE_DESCRIPTION_OUTPUT}" "${UPDATE_CONDITION_OUTPUT}"
            else
                print_abort "${UPDATE_DESCRIPTION_OUTPUT}" "${UPDATE_CONDITION_OUTPUT}"
            fi
            exit
        fi
    )
    RET="$?"
    rm -rf "${UPDATE_RUN_TMP_DIR}"
    exit "${RET}"
)

function main () {
    read_options "$@"
    shift "${COUNT_OPTIONAL_PARAMETERS}"
    init_variables
    update_updater_scripts
    if [[ "$1" == "all" ]]; then
        read_update_order
    else
        UPDATE_ORDER=()
        for ENTRY in "$@"; do
            UPDATE_ORDER+=( "${ENTRY}.zsh" )
        done
    fi
    for UPDATE_SCRIPT in "${UPDATE_ORDER[@]}"; do
        run_update_script "${UPDATE_SCRIPT}"
        RET="$?"
        rehash  # rebuild PATH cache
        if [[ "${RET}" -ne 0 ]] && (( ABORT_ON_FAIL )); then
            exit "${RET}"
        fi
    done
    print_summary
}

main "$@"

# vim: ft=zsh:tw=120
